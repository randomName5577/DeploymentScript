const express=require("express");const crypto=require("crypto");const{exec:exec}=require("child_process");require("dotenv").config();const app=express();const port=4e3;const secret=process.env.WEBHOOK_SECRET;if(!secret){console.error("Error: WEBHOOK_SECRET is not set");process.exit(1)}app.use(express.json({verify:(req,res,buf)=>{req.githubSignature=req.get("X-Hub-Signature-256");req.payloadBuffer=buf}}));app.post("/redeploymentwebhook",((req,res)=>{const hmac=crypto.createHmac("sha256",secret);const payloadBuffer=req.payloadBuffer||"";const digest="sha256="+hmac.update(payloadBuffer).digest("hex");if(digest===req.githubSignature){exec("./deploy.sh",((error,stdout,stderr)=>{if(error){console.error(`Exec error: ${error}`);return res.status(500).send("Internal Server Error")}if(stderr)console.error(`stderr: ${stderr}`);console.log(`stdout: ${stdout}`);res.status(200).send("OK")}))}else{console.error("Received an unauthorized request.");res.status(403).send("Forbidden")}}));app.use(((err,req,res,next)=>{console.error("Express Error: ",err.stack);res.status(500).send("Internal Server Error")}));process.on("uncaughtException",(err=>{console.error("Uncaught Exception: ",err.stack);process.exit(1)}));process.on("unhandledRejection",((reason,promise)=>{console.error("Unhandled Rejection at: ",promise,"reason: ",reason.stack||reason);process.exit(1)}));const server=app.listen(port,(()=>{console.log(`Webhook listener running at http://localhost:${port}`)})).on("error",(err=>{console.error("Server Error: ",err.stack);process.exit(1)}));["SIGINT","SIGTERM"].forEach((signal=>{process.on(signal,(()=>{console.log(`Received ${signal}. Closing the server.`);server.close((()=>{console.log("Server closed.");process.exit(0)}))}))}));
